buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'kr.entree.spigradle' version '1.2.1'
    id 'java'
    id 'jacoco'
}

apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/publish.gradle"

sourceCompatibility = 8
targetCompatibility = 8

ext {
    //Define one of the supported mc versions
    mcVersion = project.property("mcVersion")
    packageName = project.property("packageName")
}

group project.property("group")

spigot {
    name = project.property("pluginName")
    authors = [project.property("author")]
    apiVersion = project.property("apiVersion")
    load = STARTUP
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

archivesBaseName = project.property("pluginName")

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    //Added spigot repository
    maven {
        name = 'Spigot'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }

    maven {
        name = 'github'
        url = 'https://maven.pkg.github.com/Silthus/ConfigLib'
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }

    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }

    //Add your repositories here
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    compileOnly "org.spigotmc:spigot-api:${mcVersion}-R0.1-SNAPSHOT"

    implementation group: 'javax.inject', name: 'javax.inject', version: '1'
    /**
     * Google guice
     */
    implementation group: 'com.google.inject', name: 'guice', version: '4.2.3'
    // https://mvnrepository.com/artifact/com.google.inject.extensions/guice-assistedinject
    implementation group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '4.2.3'

    /**
     * Governator for dependency injection and life cycle support.
     */
    implementation group: 'com.netflix.governator', name: 'governator', version: '1.17.10'
    implementation group: 'com.netflix.governator', name: 'governator-api', version: '1.17.10'
    implementation group: 'com.netflix.governator', name: 'governator-core', version: '1.17.10'

    // https://github.com/ronmamo/reflections
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'

    // https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api
    implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '1.3.5'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    // https://mvnrepository.com/artifact/aopalliance/aopalliance
    implementation group: 'aopalliance', name: 'aopalliance', version: '1.0'


    //Add dependencies here
    implementation 'de.exlll:configlib-bukkit:2.6.0'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.0.0-RC2'

    //Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.15:0.3.0-SNAPSHOT'
    testImplementation 'org.assertj:assertj-core:3.16.1'
    testImplementation 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    ignoreFailures = true
}

shadowJar {
    classifier = ''
    dependencies {
        include(dependency('de.exlll:configlib-bukkit:'))
        include(dependency('jakarta.persistence:jakarta.persistence-api:'))
        include(dependency('javax.inject:javax.inject:'))
        include(dependency('com.google.inject::'))
        include(dependency('com.google.inject.extensions::'))
        include(dependency('com.netflix.governator::'))
        include(dependency('jakarta.annotation:jakarta.annotation-api:'))
        include(dependency('org.slf4j:slf4j-api:'))
        include(dependency('aopalliance:aopalliance:'))
        include(dependency('org.reflections:reflections:'))
    }

    relocate 'de.exlll.configlib', "${packageName}.configlib"
}

tasks.build.dependsOn(shadowJar)
tasks.publish.dependsOn(shadowJar)

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

processResources {
    project.properties.put("version", this.version)
    expand project.properties
}

task cleanPlugin() {
    group 'deploy'
    description 'Cleans the plugin in the working directory up'
    delete 'working/plugins/' + project.property("pluginName") + '-' + project.version.toString() + '.jar'
}

task copyPluginYaml(type: Copy, dependsOn: spigotPluginYaml) {
    from(new File(spigotPluginYaml.temporaryDir, "plugin.yml"))
    into(sourceSets.main.resources.srcDirs[0])
}

task deploy(type: Copy, dependsOn: [
    'cleanPlugin',
    'jar'
]) {
    group 'deploy'
    description 'Exports you plugin to the plugin directory in your test server'

    def pluginFolder = project.property('pluginFolder').toString()

    from shadowJar
    into pluginFolder.isEmpty() ? 'working/plugins' : pluginFolder
}

task setupServer {
    group 'server'
    description 'Downloads the server jar'

    def server = new File('working/server.jar')

    if (server.exists()) {
        server.delete()
    }

    def url = ''
    switch (mcVersion) {
        case '1.8.8':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.8.8-R0.1-SNAPSHOT-latest.jar'
            break

        case '1.12.2':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.12.2.jar'
            break

        case '1.13.2':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.13.2.jar'
            break

        case '1.14.4':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.14.4.jar'
            break
        case '1.15.2':
            url = 'https://cdn.getbukkit.org/spigot/spigot-1.15.2.jar'
            break
    }

    if (url.isEmpty()) {
        throw new GradleException('NOT A SUPPORTED VERSION, PLEASE USE [1.8.8, 1.12.2, 1.13.2, 1.14.4, 1.15.2]!')
    }

    new URL(url).withInputStream { i -> server.withOutputStream { it << i } }
}

defaultTasks 'build', 'deploy'